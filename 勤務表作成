function manipulateSpreadsheet() {
  var fileName = getFileName();
  var fileId = getSpreadSheetId(fileName);
  var newFileName = getFileName_next();
  
  // 1. スプレッドシートをコピーして新しいファイルを作成
  var copiedSpreadsheet = DriveApp.getFileById(fileId).makeCopy(newFileName);
  var newFileId = copiedSpreadsheet.getId();
  
  // 2. 新しいファイルの名前を変更
  var newSpreadsheet = SpreadsheetApp.openById(newFileId);
  newSpreadsheet.rename(newFileName);
  
  // 3. シート"シフト表"の2行目以降を全て削除
  var shiftSheet = newSpreadsheet.getSheetByName("シフト表");
  shiftSheet.deleteRows(2, shiftSheet.getLastRow() - 1);
  
  // 4. シート"シフト表"に日付と曜日を記入
  var startDate = new Date();
  startDate.setMonth(startDate.getMonth() + 1);
  startDate.setDate(16);
  
  var endDate = new Date();
  endDate.setMonth(endDate.getMonth() + 2);
  endDate.setDate(15);
  
  var currentDate = new Date(startDate);
  var currentRow = 2; // A2から始まる行番号
  var rangeA = shiftSheet.getRange("A2:A"); // 列Aの範囲
  
  var dayNames = ["日", "月", "火", "水", "木", "金", "土"];
  
  while (currentDate <= endDate) {
    var dayOfWeek = dayNames[currentDate.getDay()];
    
    shiftSheet.getRange(currentRow, 1).setValue(currentDate);
    shiftSheet.getRange(currentRow, 2).setValue(dayOfWeek);
    
    shiftSheet.getRange(currentRow, 1).setFontSize(14); // フォントサイズを設定
    shiftSheet.getRange(currentRow, 2).setFontSize(14); // フォントサイズを設定
    
    currentDate.setDate(currentDate.getDate() + 1); // 次の日に移動
    currentRow++; // 次の行に移動
  }
  
  // 5. 曜日に基づいて背景色を設定
  var lastRow = shiftSheet.getLastRow();
  var rangeB2B = shiftSheet.getRange("B2:B" + lastRow);
  
  rangeB2B.setBackground("white"); // デフォルト色
  
  var weekendRange = shiftSheet.getRange("B2:B" + lastRow)
    .createTextFinder("土|日")
    .matchEntireCell(true)
    .useRegularExpression(true)
    .findAll();
  
  weekendRange.forEach(function(cell) {
    cell.offset(0, 1, 1, 7).setBackground("#e0e0e0");
    cell.offset(0, 1, 1, 7).setFontColor("white"); // 白字にする
  });

  // 6. 行の高さを固定する
  shiftSheet.setRowHeights(2, lastRow - 1, 20); // ここで行の高さを20に設定
  
  // 7. 枠線を設定する
  var rangeToApplyBorders = shiftSheet.getRange("A1:L" + lastRow);
  rangeToApplyBorders.setBorder(true, true, true, true, true, true, "black", SpreadsheetApp.BorderStyle.SOLID);

  // I列とJ列の間だけ枠線のスタイルを二重に設定
  var rangeBetweenIJ = shiftSheet.getRange("I1:J" + lastRow);
  rangeBetweenIJ.setBorder(null, null, null, null, true, null, "black", SpreadsheetApp.BorderStyle.DOUBLE); // 二重枠線

  // 給与表シートを取得
  var salarySheet = newSpreadsheet.getSheetByName("給与表");
  
  // A1セルに特定の文字列を書き込む
  var today = new Date();
  var nextYear = today.getMonth() === 11 ? today.getFullYear() + 1 : today.getFullYear();
  var nextMonth = (today.getMonth() + 1) % 12 + 1;
  var nextNextMonth = (today.getMonth() + 2) % 12 + 1;
  var salaryTitle = "どさんこワイド朝 " + nextYear + "年" + nextMonth + "月16日～" + nextNextMonth + "月15日分お給料";
  salarySheet.getRange("A1").setValue(salaryTitle);
  
  // "研修"と書かれているセルを見つけて、2行下以降のE列からK列までを空白にする
  var trainingCells = salarySheet.getRange("A:A").createTextFinder("研修").findAll();
  trainingCells.forEach(function(cell) {
    var row = cell.getRow() + 2; // 2行下から
    var lastRow = salarySheet.getLastRow(); // シートの最後の行
    var range = salarySheet.getRange(row, 5, lastRow - row + 1, 7); // E列からK列まで
    range.clearContent(); // セルの内容をクリア
  });
  
  // "残業"と書かれているセルを見つけて、それ以降のL列を全てブランクにする
  var overtimeCells = salarySheet.getRange("L:L").createTextFinder("残業").findAll();
  overtimeCells.forEach(function(cell) {
    var row = cell.getRow() + 1; // 1行下から
    salarySheet.getRange("L" + (row + 1) + ":L" + salarySheet.getLastRow()).clearContent();
  });

  // 給与表シートを取得
  var salarySheet = newSpreadsheet.getSheetByName("給与表");

  // "合計日数"と記載があるセルの行番号を探す
  var totalDaysRow = salarySheet.getRange("A:A").createTextFinder("合計日数").findNext().getRow();

  // 5行目から"合計日数"の1行上まで、E列からK列の数式を設定
  for (var row = 5; row < totalDaysRow; row++) {
    for (var col = 5; col <= 11; col++) { // E列からK列
      // 当該列の2列左の列名を取得（例：E列ならC列）
      var offsetColName = String.fromCharCode('A'.charCodeAt(0) + col - 2 - 1);
      // 数式を生成
      var formula = "=COUNTIF('シフト表'!" + offsetColName + "$2:" + offsetColName + "$33,$A" + row + ")";
      // 数式をセット
      salarySheet.getRange(row, col).setFormula(formula);
    }
  }
    // スプレッドシートのURLを取得
  var spreadsheetUrl = newSpreadsheet.getUrl();

    // LINE Notifyに送信するメッセージを設定
  var message = "次の勤務表を作成しました。修正点がありましたらお手数ですが直接直してください。\n" + spreadsheetUrl;

  // LINE Notifyに送信
  sendLineNotify(message);
}

// LINE Notifyを使用してメッセージを送信する関数
function sendLineNotify(message) {
  var token = "qevwgZCVh1nmJijfW0sfiX5u3GtlVZkGmVXAsTcIfBf"; // ここにLINE Notifyのトークンを入力
  var options = {
    "method"  : "post",
    "payload" : "message=" + encodeURIComponent(message),
    "headers" : {"Authorization" : "Bearer " + token}
  };

  UrlFetchApp.fetch("https://notify-api.line.me/api/notify", options);
}
